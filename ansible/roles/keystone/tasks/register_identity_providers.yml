---
- name: Copying Keystone IdP mappings
  vars:
    service: "{{ keystone_services.keystone }}"
  copy:
    src: "{{ item.file }}"
    dest: "{{ node_config_directory }}/keystone/mappings/"
    mode: "0660"
  become: true
  register: keystone_identity_mapping_files
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_items: "{{ keystone_identity_mappings }}"
  notify:
    - Restart keystone container

- name: List configured attribute mappings (that can be used by IdPs)
  command: >
    docker exec -t keystone openstack \
      --os-auth-url={{ openstack_auth.auth_url }} \
      --os-password={{ openstack_auth.password }} \
      --os-username={{ openstack_auth.username }} \
      --os-project-name={{ openstack_auth.project_name }} \
      --os-identity-api-version={{ identity_api_version }} \
    mapping list -c ID --format value
  run_once: True
  become: True
  register: existing_mappings_register

- set_fact:
    existing_mappings: "{{ existing_mappings_register.stdout.split('\n') | map('trim') | list }}"

- name: Remove unmanaged attribute mappings
  command: >
    docker exec -t keystone openstack \
    --os-auth-url={{ openstack_auth.auth_url }} \
    --os-password={{ openstack_auth.password }} \
    --os-username={{ openstack_auth.username }} \
    --os-project-name={{ openstack_auth.project_name }} \
    --os-identity-api-version={{ identity_api_version }} \
    mapping delete {{ item }}
  run_once: True
  become: true
  with_items: "{{ existing_mappings }}"
  when:
    - item not in (keystone_identity_mappings | map(attribute='name') | list)
    - should_remove_attribute_mappings | default(False)

- name: Register attribute mappings in OpenStack
  command: >
    docker exec -t keystone openstack \
    --os-auth-url={{ openstack_auth.auth_url }} \
    --os-password={{ openstack_auth.password }} \
    --os-username={{ openstack_auth.username }} \
    --os-project-name={{ openstack_auth.project_name }} \
    --os-identity-api-version={{ identity_api_version }} \
    mapping create \
    --rules "{{ container_config_directory }}/mappings/{{ item.file | basename }}" \
    {{ item.name }}
  run_once: True
  when:
    - item.name not in existing_mappings
  with_items: "{{ keystone_identity_mappings }}"

- name: Update existing attribute mappings in OpenStack
  command: >
    docker exec -t keystone openstack \
    --os-auth-url={{ openstack_auth.auth_url }} \
    --os-password={{ openstack_auth.password }} \
    --os-username={{ openstack_auth.username }} \
    --os-project-name={{ openstack_auth.project_name }} \
    --os-identity-api-version={{ identity_api_version }} \
    mapping set \
    --rules "{{ container_config_directory }}/mappings/{{ item.file | basename }}" \
    {{ item.name }}
  run_once: True
  when:
    - item.name in existing_mappings
  with_items: "{{ keystone_identity_mappings }}"

- name: List configured IdPs
  command: >
    docker exec -t keystone openstack \
    --os-auth-url={{ openstack_auth.auth_url }} \
    --os-password={{ openstack_auth.password }} \
    --os-username={{ openstack_auth.username }} \
    --os-project-name={{ openstack_auth.project_name }} \
    --os-identity-api-version={{ identity_api_version }} \
    identity provider list -c ID --format value
  run_once: True
  become: true
  register: existing_idps_register

- set_fact:
    existing_idps: "{{ existing_idps_register.stdout.split('\n') | map('trim') | list }}"

- name: Remove unmanaged identity providers
  command: >
    docker exec -t keystone openstack \
    --os-auth-url={{ openstack_auth.auth_url }} \
    --os-password={{ openstack_auth.password }} \
    --os-username={{ openstack_auth.username }} \
    --os-project-name={{ openstack_auth.project_name }} \
    --os-identity-api-version={{ identity_api_version }} \
    identity provider delete {{ item }}
  run_once: True
  become: true
  with_items: "{{ existing_idps }}"
  when:
    - item not in (keystone_identity_providers | map(attribute='name') | list)
    - should_remove_identity_providers | default(False)

- name: Register IdP domains
  kolla_toolbox:
    module_name: os_keystone_domain
    module_args:
      auth: "{{ openstack_auth }}"
      name: "{{ item.domain_name }}"
      description: "Identity domain for {{ item.name }}"
  run_once: True
  delegate_to: "{{ groups['control'][0] }}"
  loop: "{{ keystone_identity_providers }}"
  when:
    - item.domain_name is defined

- name: Register Identity Providers in OpenStack
  command: >
    docker exec -t keystone openstack \
    --os-auth-url={{ openstack_auth.auth_url }} \
    --os-password={{ openstack_auth.password }} \
    --os-username={{ openstack_auth.username }} \
    --os-project-name={{ openstack_auth.project_name }} \
    --os-identity-api-version={{ identity_api_version }} \
    identity provider create \
    --description "{{ item.public_name }}" \
    --remote-id "{{ item.identifier }}" \
    {{ item.name }}
  run_once: True
  become: true
  when:
    - item.name not in existing_idps
  with_items: "{{ keystone_identity_providers }}"

- name: Update Identity Providers in OpenStack according to Kolla-Ansible configuraitons
  command: >
    docker exec -t keystone openstack \
    --os-auth-url={{ openstack_auth.auth_url }} \
    --os-password={{ openstack_auth.password }} \
    --os-username={{ openstack_auth.username }} \
    --os-project-name={{ openstack_auth.project_name }} \
    --os-identity-api-version={{ identity_api_version }} \
    identity provider set \
    --description "{{ item.public_name }}" \
    --remote-id "{{ item.identifier }}" \
    "{{ item.name }}"
  run_once: True
  become: true
  when:
    - item.name in existing_idps
  with_items: "{{ keystone_identity_providers }}"

- name: Configure attribute mappings for each Identity Provider. (We expect the mappings to be configured by the operator)
  command: >
    docker exec -t keystone openstack \
    --os-auth-url={{ openstack_auth.auth_url }} \
    --os-password={{ openstack_auth.password }} \
    --os-username={{ openstack_auth.username }} \
    --os-project-name={{ openstack_auth.project_name }} \
    --os-identity-api-version={{ identity_api_version }} \
    federation protocol create \
    --mapping {{ item.attribute_mapping }} \
    --identity-provider {{ item.name }} \
    {{ item.protocol }}
  run_once: True
  become: true
  when:
    - item.name not in existing_idps
  with_items: "{{ keystone_identity_providers }}"

- name: Update attribute mappings for each Identity Provider. (We expect the mappings to be configured by the operator).
  command: >
    docker exec -t keystone openstack \
    --os-auth-url={{ openstack_auth.auth_url }} \
    --os-password={{ openstack_auth.password }} \
    --os-username={{ openstack_auth.username }} \
    --os-project-name={{ openstack_auth.project_name }} \
    --os-identity-api-version={{ identity_api_version }} \
    federation protocol set \
    --identity-provider {{ item.name }} \
    --mapping {{ item.attribute_mapping }} \
    {{ item.protocol }}
  run_once: True
  # NOTE(pem): We must allow this task to "fail" because the OpenStack CLI is
  # returning RC=1 for sucessful executions.
  ignore_errors: yes
  become: true
  when:
    - item.name in existing_idps
  with_items: "{{ keystone_identity_providers }}"
